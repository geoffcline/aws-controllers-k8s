// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	metrics "github.com/aws/aws-controllers-k8s/pkg/metrics"
	logr "github.com/go-logr/logr"
	mock "github.com/stretchr/testify/mock"

	session "github.com/aws/aws-sdk-go/aws/session"

	types "github.com/aws/aws-controllers-k8s/pkg/types"

	v1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
)

// AWSResourceManagerFactory is an autogenerated mock type for the AWSResourceManagerFactory type
type AWSResourceManagerFactory struct {
	mock.Mock
}

// ManagerFor provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *AWSResourceManagerFactory) ManagerFor(_a0 logr.Logger, _a1 *metrics.Metrics, _a2 types.AWSResourceReconciler, _a3 *session.Session, _a4 v1alpha1.AWSAccountID, _a5 v1alpha1.AWSRegion) (types.AWSResourceManager, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 types.AWSResourceManager
	if rf, ok := ret.Get(0).(func(logr.Logger, *metrics.Metrics, types.AWSResourceReconciler, *session.Session, v1alpha1.AWSAccountID, v1alpha1.AWSRegion) types.AWSResourceManager); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResourceManager)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logr.Logger, *metrics.Metrics, types.AWSResourceReconciler, *session.Session, v1alpha1.AWSAccountID, v1alpha1.AWSRegion) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceDescriptor provides a mock function with given fields:
func (_m *AWSResourceManagerFactory) ResourceDescriptor() types.AWSResourceDescriptor {
	ret := _m.Called()

	var r0 types.AWSResourceDescriptor
	if rf, ok := ret.Get(0).(func() types.AWSResourceDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AWSResourceDescriptor)
		}
	}

	return r0
}
