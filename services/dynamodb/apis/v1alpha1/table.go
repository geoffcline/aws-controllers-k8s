// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws/aws-controllers-k8s/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TableSpec defines the desired state of Table
type TableSpec struct {
	// +kubebuilder:validation:Required
	AttributeDefinitions   []*AttributeDefinition  `json:"attributeDefinitions"`
	BillingMode            *string                 `json:"billingMode,omitempty"`
	GlobalSecondaryIndexes []*GlobalSecondaryIndex `json:"globalSecondaryIndexes,omitempty"`
	// +kubebuilder:validation:Required
	KeySchema             []*KeySchemaElement    `json:"keySchema"`
	LocalSecondaryIndexes []*LocalSecondaryIndex `json:"localSecondaryIndexes,omitempty"`
	ProvisionedThroughput *ProvisionedThroughput `json:"provisionedThroughput,omitempty"`
	SSESpecification      *SSESpecification      `json:"sseSpecification,omitempty"`
	StreamSpecification   *StreamSpecification   `json:"streamSpecification,omitempty"`
	// +kubebuilder:validation:Required
	TableName *string `json:"tableName"`
	Tags      []*Tag  `json:"tags,omitempty"`
}

// TableStatus defines the observed state of Table
type TableStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	Conditions         []*ackv1alpha1.Condition `json:"conditions"`
	ArchivalSummary    *ArchivalSummary         `json:"archivalSummary,omitempty"`
	BillingModeSummary *BillingModeSummary      `json:"billingModeSummary,omitempty"`
	CreationDateTime   *metav1.Time             `json:"creationDateTime,omitempty"`
	GlobalTableVersion *string                  `json:"globalTableVersion,omitempty"`
	ItemCount          *int64                   `json:"itemCount,omitempty"`
	LatestStreamARN    *string                  `json:"latestStreamARN,omitempty"`
	LatestStreamLabel  *string                  `json:"latestStreamLabel,omitempty"`
	Replicas           []*ReplicaDescription    `json:"replicas,omitempty"`
	RestoreSummary     *RestoreSummary          `json:"restoreSummary,omitempty"`
	SSEDescription     *SSEDescription          `json:"sseDescription,omitempty"`
	TableID            *string                  `json:"tableID,omitempty"`
	TableSizeBytes     *int64                   `json:"tableSizeBytes,omitempty"`
	TableStatus        *string                  `json:"tableStatus,omitempty"`
}

// Table is the Schema for the Tables API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Table struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TableSpec   `json:"spec,omitempty"`
	Status            TableStatus `json:"status,omitempty"`
}

// TableList contains a list of Table
// +kubebuilder:object:root=true
type TableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Table `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Table{}, &TableList{})
}
